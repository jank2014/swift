//: Playground - noun: a place where people can play
//made by jankz jankz@jankz.com
import UIKit
/************************************** 类和结构体 ****************************************/
print("类和结构体是人们构建代码所用的一种通用且灵活的构造体。我们可以使用完全相同的语法规则来为类和结构体定义属性(常量、变量)和添加方法,从而扩展类和结构体的功能。")
print("与其他编程语言所不同的是,Swift 并不要求你为自定义类和结构去创建独立的接口和实现文件。你所要做的是 在一个单一文件中定义一个类或者结构体,系统将会动生成面向其它代码的外部接口。")


/************************************** 类和结构体对比 ****************************************/
print("Swift 中类和结构体有很多共同点。共同处在于:")

/*

    • 定义属性用于存储值
    • 定义方法用于提供功能
    • 定义附属脚本用于访问值
    • 定义构造器用于生成初始化值
    • 通过扩展以增加默认实现的功能 • 实现协议以提供某种标准功能

*/

print("与结构体相比,类还有如下的附加功能:")

/*

    • 继承允许一个类继承另一个类的特征
    • 类型转换允许在运行时检查和解释一个类实例的类型 • 解构器允许一个类实例释放任何其所被分配的资源
    • 引用计数允许对一个类的多次引用

*/



/************************************** 定义语法 ****************************************/

print("类和结构体有着类似的定义方式。通过关键字class struct 来分别表示类和结构体 并在一对大括号中定义他们的具体内容")

print("类的定义")
/*
    class SomeClass {
        //class definition goes here 类主体代码
    }

*/

print("结构体定义")
/*
    struct SomeClass {
        //class definition goes here 类主体代码
    }

*/

//注意
//在你每次定义一个新类或者结构体的时候,实际上你是定义了一个新的 Swift 类型。
//因此请使用UpperCameCase 这种方式来命名(如 SomeClass 和 SomeStructure 等),以便符合标准 Swift 类型的大写命名风格(如 g , Int 和 Bool )。
//相反的,请使用 lowerCamelCase 这种方式为属性和方法命名(如 framerate 和 Count ),以便和类型名区分。



print("类和结构体定义示例")
struct Resolution {
    var width = 0
    var height = 0
}

class VideoMode {
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name: String?
}



/************************************** 类和结构体实例 ****************************************/

let someReolution = Resolution()
let someVideoMode = VideoMode()


/*

    结构体和类都使用构造器语法来生成新的实例。构造器语法的最简单形式是在结构体或者类的类型名称后跟随一对空括号,
    如 Resolution() 或 VideoMode() 。通过这种方式所创建的类或者结构体实例,其属性均会被初始化为 默认值。

*/





/************************************** 属性访问 ****************************************/

//通过使用点语法(dot syntax),你可以访问实例的属性。其语法规则是,实例名后面紧跟属性名,两者通过点号( . )连接

someReolution.height
someReolution.width
someVideoMode.resolution.width

someVideoMode.resolution.width = 1280
print(someVideoMode.resolution.width)

/************************************** 类和结构体的成员逐一构造器 *********************************/








/************************************** 结构体和枚举是值类型 ****************************************/

/************************************** 类是引用类型 ****************************************/

/************************************** 类和结构体的选择 ****************************************/

/************************************** 字符串数组 ****************************************/

/************************************** 类是引用类型 ****************************************/

